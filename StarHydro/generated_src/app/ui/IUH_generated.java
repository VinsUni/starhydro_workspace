/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package app.ui;

public abstract class IUH_generated extends javax.swing.JPanel implements star.event.EventController, star.event.Listener, star.hydro.rainfall.ConvolutionChartBinsRaiser, star.hydro.rainfall.ConvolutionPaletteRaiser, star.hydrology.events.giuh.GIUHVelocitiesRaiser
{
	private star.event.Adapter adapter;
	private float channelVelocity;
	private float hillslopeVelocity;
	private java.util.prefs.Preferences preferences = null;
	private static final long serialVersionUID = 1L;

	public  IUH_generated()
	{
		super();
	}
	 
	public  IUH_generated(boolean boolean0)
	{
		super( boolean0);
	}
	 
	public  IUH_generated(java.awt.LayoutManager layoutManager, boolean boolean0)
	{
		super( layoutManager,boolean0);
	}
	 
	public  IUH_generated(java.awt.LayoutManager layoutManager)
	{
		super( layoutManager);
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addContained(mit.awt.event.ActionEvent.class );
		getAdapter().addContained(star.hydrology.events.GridStatisticsProviderChangeEvent.class );
		getAdapter().addExcludeExternal(mit.awt.event.ActionEvent.class );
		getAdapter().addHandled(star.hydrology.events.GridStatisticsProviderChangeEvent.class);
		getAdapter().addHandled(star.hydrology.events.giuh.GIUHVelocitiesEvent.class);
		getAdapter().addHandled(mit.awt.event.ActionEvent.class);
		getAdapter().addHandled(star.events.common.InitializeEvent.class);
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "star.hydrology.events.GridStatisticsProviderChangeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleSlider( (star.hydrology.events.GridStatisticsProviderChangeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleSlider "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.events.giuh.GIUHVelocitiesEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleAction( (star.hydrology.events.giuh.GIUHVelocitiesRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleAction "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "mit.awt.event.ActionEvent" ) && event.isValid() ) 
		{
			(new star.hydrology.events.giuh.GIUHVelocitiesEvent(this,false)).raise();
		 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleAction( (mit.awt.event.ActionRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleAction "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.events.common.InitializeEvent" ) && event.isValid() ) 
		{
			(new star.hydrology.events.giuh.GIUHVelocitiesEvent(this,false)).raise();
		 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleInit( (star.events.common.InitializeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleInit "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	public float getChannelVelocity()
	{
		return this.channelVelocity ;
	}
	 
	public float getHillslopeVelocity()
	{
		return this.hillslopeVelocity ;
	}
	 
	public java.util.prefs.Preferences getPreferences(java.lang.String name)
	{
		try
		{
			plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
			this.preferences = pref.getPreferences(name);
		}
		catch( plugin.PluginException ex )
		{
			ex.printStackTrace();
		}
		return preferences;
	}
	 
	public java.util.prefs.Preferences getPreferences()
	{
		if( preferences == null )
		{
			try
			{
				plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
				this.preferences = pref.getPreferences("app.ui.IUH");
			}
			catch( plugin.PluginException ex )
			{
				ex.printStackTrace();
			}
		}
		return preferences;
	}
	 
	abstract void handleAction(mit.awt.event.ActionRaiser r);
	 
	abstract void handleAction(star.hydrology.events.giuh.GIUHVelocitiesRaiser r);
	 
	abstract void handleInit(star.events.common.InitializeRaiser r);
	 
	abstract void handleSlider(star.hydrology.events.GridStatisticsProviderChangeRaiser r);
	 
	public void raise_ConvolutionChartBinsEvent()
	{
		(new star.hydro.rainfall.ConvolutionChartBinsEvent(this)).raise();
	}
	 
	public void raise_ConvolutionPaletteEvent()
	{
		(new star.hydro.rainfall.ConvolutionPaletteEvent(this)).raise();
	}
	 
	public void raise_GIUHVelocitiesEvent()
	{
		(new star.hydrology.events.giuh.GIUHVelocitiesEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeContained(mit.awt.event.ActionEvent.class );
		getAdapter().removeContained(star.hydrology.events.GridStatisticsProviderChangeEvent.class );
		getAdapter().removeExcludeExternal(mit.awt.event.ActionEvent.class );
		getAdapter().removeHandled(star.hydrology.events.GridStatisticsProviderChangeEvent.class);
		getAdapter().removeHandled(star.hydrology.events.giuh.GIUHVelocitiesEvent.class);
		getAdapter().removeHandled(mit.awt.event.ActionEvent.class);
		getAdapter().removeHandled(star.events.common.InitializeEvent.class);
	}
	 
	protected void setChannelVelocity(float channelVelocity)
	{
		this.channelVelocity = channelVelocity ;
	}
	 
	protected void setHillslopeVelocity(float hillslopeVelocity)
	{
		this.hillslopeVelocity = hillslopeVelocity ;
	}
	 
}