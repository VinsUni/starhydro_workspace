/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package app.worker;

public abstract class StreamOrderStatisticsWorker_generated extends java.lang.Object implements star.event.EventController, star.event.Listener, star.hydrology.events.StreamOrderStatisticsRaiser
{
	private star.event.Adapter adapter;
	private float[] orderAreas;
	private int[] orderCount;
	private float[] orderLength;
	private float[] orderSlopes;
	private app.worker.streamnetwork.Stream rootStream;
	private static final long serialVersionUID = 1L;

	public  StreamOrderStatisticsWorker_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		getAdapter().addHandled(star.hydrology.events.StreamRootChangeEvent.class);
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "star.hydrology.events.StreamRootChangeEvent" ) && event.isValid() ) 
		{
			(new star.hydrology.events.StreamOrderStatisticsEvent(this,false)).raise();
		 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			setStreamRoot( (star.hydrology.events.StreamRootChangeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".setStreamRoot "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	public float getOrderAreas(int i)
	{
		return this.orderAreas[i] ;
	}
	 
	public float[] getOrderAreas()
	{
		return this.orderAreas ;
	}
	 
	public int getOrderCount(int i)
	{
		return this.orderCount[i] ;
	}
	 
	public int[] getOrderCount()
	{
		return this.orderCount ;
	}
	 
	public float getOrderLength(int i)
	{
		return this.orderLength[i] ;
	}
	 
	public float[] getOrderLength()
	{
		return this.orderLength ;
	}
	 
	public float getOrderSlopes(int i)
	{
		return this.orderSlopes[i] ;
	}
	 
	public float[] getOrderSlopes()
	{
		return this.orderSlopes ;
	}
	 
	public app.worker.streamnetwork.Stream getRootStream()
	{
		return this.rootStream ;
	}
	 
	public void raise_StreamOrderStatisticsEvent()
	{
		(new star.hydrology.events.StreamOrderStatisticsEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		getAdapter().removeHandled(star.hydrology.events.StreamRootChangeEvent.class);
	}
	 
	protected void setOrderAreas(float[] orderAreas)
	{
		this.orderAreas = orderAreas ;
	}
	 
	protected void setOrderCount(int[] orderCount)
	{
		this.orderCount = orderCount ;
	}
	 
	protected void setOrderLength(float[] orderLength)
	{
		this.orderLength = orderLength ;
	}
	 
	protected void setOrderSlopes(float[] orderSlopes)
	{
		this.orderSlopes = orderSlopes ;
	}
	 
	protected void setRootStream(app.worker.streamnetwork.Stream rootStream)
	{
		this.rootStream = rootStream ;
	}
	 
	abstract void setStreamRoot(star.hydrology.events.StreamRootChangeRaiser r);
	 
}