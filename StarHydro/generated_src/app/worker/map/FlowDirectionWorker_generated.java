/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package app.worker.map;

public abstract class FlowDirectionWorker_generated extends app.worker.AbstractWorker implements star.event.EventController, star.event.Listener, star.hydrology.events.map.FlowdirectionMapLayerRaiser
{
	private static final long serialVersionUID = 1L;

	public  FlowDirectionWorker_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(star.hydrology.events.map.TerrainMapLayerEvent.class);
	}
	 
	abstract void calculateFlowDirection(star.hydrology.events.map.TerrainMapLayerRaiser raiser);
	 
	public void eventRaised(final star.event.Event event)
	{
		super.eventRaised( event );
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "star.hydrology.events.map.TerrainMapLayerEvent" ) && event.isValid() ) 
		{
			(new star.hydrology.events.map.FlowdirectionMapLayerEvent(this,false)).raise();
		 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			calculateFlowDirection( (star.hydrology.events.map.TerrainMapLayerRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".calculateFlowDirection "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.events.map.TerrainMapLayerEvent" ) && !event.isValid() ) 
		{
			(new star.hydrology.events.map.FlowdirectionMapLayerEvent(this,false)).raise();
		 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			invalidateFlowDirection( (star.hydrology.events.map.TerrainMapLayerRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".invalidateFlowDirection "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	abstract void invalidateFlowDirection(star.hydrology.events.map.TerrainMapLayerRaiser raiser);
	 
	public void raise_FlowdirectionMapLayerEvent()
	{
		(new star.hydrology.events.map.FlowdirectionMapLayerEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(star.hydrology.events.map.TerrainMapLayerEvent.class);
	}
	 
}