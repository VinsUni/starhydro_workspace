/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package app.worker.map;

public abstract class WatershedWorker_generated extends app.worker.AbstractWorker implements star.event.EventController, star.event.GatedListener, star.event.Listener, star.hydrology.events.map.WatershedLayerRaiser
{
	private javax.vecmath.Point3f center;
	private star.hydrology.events.interfaces.PaletteRenderableLayer flowAccomulation;
	private star.hydrology.events.interfaces.PaletteRenderableLayer flowDirection;
	private star.hydrology.events.interfaces.PaletteRenderableLayer flowUpstream;
	private static final long serialVersionUID = 1L;
	private star.hydrology.events.interfaces.PaletteRenderableLayer terrain;
	private float threshold;
	private java.awt.Point watershedOrigin;

	public  WatershedWorker_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(star.hydrology.events.GridStatisticsProviderChangeEvent.class);
		getAdapter().addGatedAnd( new Class[]{ star.hydrology.events.map.FilledMapLayerEvent.class,star.hydrology.events.map.FlowaccumulationMapLayerEvent.class,star.hydrology.events.map.FlowdirectionMapLayerEvent.class,star.hydrology.events.map.FlowUpstreamDirectionEvent.class},new Class[]{ star.hydrology.events.map.WatershedLayerEvent.class},true);
		getAdapter().addHandled(star.hydrology.events.SelectWatershedOriginEvent.class);
	}
	 
	private void eventAndGateRaisedHandles(final star.event.Event in_event[], final boolean valid)
	{
		final star.event.Event[] event = in_event;
		if( event != null && valid && event.length == 4 && event[0].getClass().getName().equals( "star.hydrology.events.map.FilledMapLayerEvent" ) && event[1].getClass().getName().equals( "star.hydrology.events.map.FlowaccumulationMapLayerEvent" ) && event[2].getClass().getName().equals( "star.hydrology.events.map.FlowdirectionMapLayerEvent" ) && event[3].getClass().getName().equals( "star.hydrology.events.map.FlowUpstreamDirectionEvent" ) &&  true )
		{
			(new star.hydrology.events.map.WatershedLayerEvent(this,false)).raise();
			utils.Runner.runOnThread(new Runnable() { 
				public void run() { 
					long start = System.nanoTime();
					setTerrain( (star.hydrology.events.map.FilledMapLayerRaiser)event[0].getSource(),(star.hydrology.events.map.FlowaccumulationMapLayerRaiser)event[1].getSource(),(star.hydrology.events.map.FlowdirectionMapLayerRaiser)event[2].getSource(),(star.hydrology.events.map.FlowUpstreamDirectionRaiser)event[3].getSource() );
					long end = System.nanoTime();
				if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".setTerrain "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		super.eventRaised( event );
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "star.hydrology.events.GridStatisticsProviderChangeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			setAccumulationTreshold( (star.hydrology.events.GridStatisticsProviderChangeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".setAccumulationTreshold "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.events.SelectWatershedOriginEvent" ) && event.isValid() ) 
		{
			(new star.hydrology.events.map.WatershedLayerEvent(this,false)).raise();
		 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			setWatershedOrigin( (star.hydrology.events.SelectWatershedOriginRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".setWatershedOrigin "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public void eventsRaised(final star.event.Event event[], final boolean valid)
	{
		eventAndGateRaisedHandles(event,valid);
	}
	 
	protected javax.vecmath.Point3f getCenter()
	{
		return this.center ;
	}
	 
	protected star.hydrology.events.interfaces.PaletteRenderableLayer getFlowAccomulation()
	{
		return this.flowAccomulation ;
	}
	 
	protected star.hydrology.events.interfaces.PaletteRenderableLayer getFlowDirection()
	{
		return this.flowDirection ;
	}
	 
	protected star.hydrology.events.interfaces.PaletteRenderableLayer getFlowUpstream()
	{
		return this.flowUpstream ;
	}
	 
	protected star.hydrology.events.interfaces.PaletteRenderableLayer getTerrain()
	{
		return this.terrain ;
	}
	 
	protected float getThreshold()
	{
		return this.threshold ;
	}
	 
	public java.awt.Point getWatershedOrigin()
	{
		return this.watershedOrigin ;
	}
	 
	public void raise_WatershedLayerEvent()
	{
		(new star.hydrology.events.map.WatershedLayerEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(star.hydrology.events.GridStatisticsProviderChangeEvent.class);
		getAdapter().removeGatedAnd( new Class[]{ star.hydrology.events.map.FilledMapLayerEvent.class,star.hydrology.events.map.FlowaccumulationMapLayerEvent.class,star.hydrology.events.map.FlowdirectionMapLayerEvent.class,star.hydrology.events.map.FlowUpstreamDirectionEvent.class},new Class[]{ star.hydrology.events.map.WatershedLayerEvent.class});
		getAdapter().removeHandled(star.hydrology.events.SelectWatershedOriginEvent.class);
	}
	 
	abstract void setAccumulationTreshold(star.hydrology.events.GridStatisticsProviderChangeRaiser r);
	 
	protected void setCenter(javax.vecmath.Point3f center)
	{
		this.center = center ;
	}
	 
	protected void setFlowAccomulation(star.hydrology.events.interfaces.PaletteRenderableLayer flowAccomulation)
	{
		this.flowAccomulation = flowAccomulation ;
	}
	 
	protected void setFlowDirection(star.hydrology.events.interfaces.PaletteRenderableLayer flowDirection)
	{
		this.flowDirection = flowDirection ;
	}
	 
	protected void setFlowUpstream(star.hydrology.events.interfaces.PaletteRenderableLayer flowUpstream)
	{
		this.flowUpstream = flowUpstream ;
	}
	 
	protected void setTerrain(star.hydrology.events.interfaces.PaletteRenderableLayer terrain)
	{
		this.terrain = terrain ;
	}
	 
	abstract void setTerrain(star.hydrology.events.map.FilledMapLayerRaiser terrain, star.hydrology.events.map.FlowaccumulationMapLayerRaiser flowAcc, star.hydrology.events.map.FlowdirectionMapLayerRaiser flowDir, star.hydrology.events.map.FlowUpstreamDirectionRaiser flowUpstream);
	 
	protected void setThreshold(float threshold)
	{
		this.threshold = threshold ;
	}
	 
	protected void setWatershedOrigin(java.awt.Point watershedOrigin)
	{
		this.watershedOrigin = watershedOrigin ;
	}
	 
	abstract void setWatershedOrigin(star.hydrology.events.SelectWatershedOriginRaiser r);
	 
}