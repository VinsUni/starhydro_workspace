/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package app.worker;

public abstract class SimpleIUH_generated extends java.lang.Object implements star.event.EventController, star.event.GatedListener, star.event.Listener, star.hydrology.events.IUHRaiser, star.hydrology.events.map.SimpleIUHMapLayerRaiser
{
	private star.event.Adapter adapter;
	private star.hydrology.events.interfaces.PaletteRenderableLayer flowAcc;
	private star.hydrology.events.interfaces.PaletteRenderableLayer flowDir;
	private star.hydrology.events.interfaces.PaletteRenderableLayer layer;
	private static final long serialVersionUID = 1L;
	private float threshold;
	private star.hydrology.events.interfaces.PaletteRenderableLayer watershed;
	private java.awt.Point watershedOrigin;

	public  SimpleIUH_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		getAdapter().addGatedAnd( new Class[]{ star.hydrology.events.map.FlowaccumulationMapLayerEvent.class,star.hydrology.events.map.FlowdirectionMapLayerEvent.class,star.hydrology.events.map.WatershedLayerEvent.class},new Class[]{ star.hydrology.events.IUHEvent.class,star.hydrology.events.map.SimpleIUHMapLayerEvent.class},true);
		getAdapter().addHandled(star.hydrology.events.GridStatisticsProviderChangeEvent.class);
		getAdapter().addHandled(star.hydrology.events.SimpleIUHAdjustPanelEvent.class);
		getAdapter().addHandled(star.hydrology.events.giuh.GIUHVelocitiesEvent.class);
		getAdapter().addHandled(star.hydrology.events.RainfallGaugesEvent.class);
	}
	 
	private void eventAndGateRaisedHandles(final star.event.Event in_event[], final boolean valid)
	{
		final star.event.Event[] event = in_event;
		if( event != null && valid && event.length == 3 && event[0].getClass().getName().equals( "star.hydrology.events.map.FlowaccumulationMapLayerEvent" ) && event[1].getClass().getName().equals( "star.hydrology.events.map.FlowdirectionMapLayerEvent" ) && event[2].getClass().getName().equals( "star.hydrology.events.map.WatershedLayerEvent" ) &&  true )
		{
			(new star.hydrology.events.IUHEvent(this,false)).raise();
		(new star.hydrology.events.map.SimpleIUHMapLayerEvent(this,false)).raise();
			utils.Runner.runOnThread(new Runnable() { 
				public void run() { 
					long start = System.nanoTime();
					handle( (star.hydrology.events.map.FlowaccumulationMapLayerRaiser)event[0].getSource(),(star.hydrology.events.map.FlowdirectionMapLayerRaiser)event[1].getSource(),(star.hydrology.events.map.WatershedLayerRaiser)event[2].getSource() );
					long end = System.nanoTime();
				if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handle "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "star.hydrology.events.GridStatisticsProviderChangeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			setAccumulationTreshold( (star.hydrology.events.GridStatisticsProviderChangeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".setAccumulationTreshold "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.events.SimpleIUHAdjustPanelEvent" ) && event.isValid() ) 
		{
			(new star.hydrology.events.IUHEvent(this,false)).raise();
		(new star.hydrology.events.map.SimpleIUHMapLayerEvent(this,false)).raise();
		 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleEvent( (star.hydrology.events.SimpleIUHAdjustPanelRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleEvent "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.events.giuh.GIUHVelocitiesEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleRatios( (star.hydrology.events.giuh.GIUHVelocitiesRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleRatios "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.events.RainfallGaugesEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			updateRaingaugeLayer( (star.hydrology.events.RainfallGaugesRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".updateRaingaugeLayer "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public void eventsRaised(final star.event.Event event[], final boolean valid)
	{
		eventAndGateRaisedHandles(event,valid);
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	protected star.hydrology.events.interfaces.PaletteRenderableLayer getFlowAcc()
	{
		return this.flowAcc ;
	}
	 
	protected star.hydrology.events.interfaces.PaletteRenderableLayer getFlowDir()
	{
		return this.flowDir ;
	}
	 
	public star.hydrology.events.interfaces.PaletteRenderableLayer getLayer()
	{
		return this.layer ;
	}
	 
	protected float getThreshold()
	{
		return this.threshold ;
	}
	 
	protected star.hydrology.events.interfaces.PaletteRenderableLayer getWatershed()
	{
		return this.watershed ;
	}
	 
	protected java.awt.Point getWatershedOrigin()
	{
		return this.watershedOrigin ;
	}
	 
	abstract void handle(star.hydrology.events.map.FlowaccumulationMapLayerRaiser fa, star.hydrology.events.map.FlowdirectionMapLayerRaiser fd, star.hydrology.events.map.WatershedLayerRaiser ws);
	 
	abstract void handleEvent(star.hydrology.events.SimpleIUHAdjustPanelRaiser r);
	 
	abstract void handleRatios(star.hydrology.events.giuh.GIUHVelocitiesRaiser r);
	 
	public void raise_IUHEvent()
	{
		(new star.hydrology.events.IUHEvent(this)).raise();
	}
	 
	public void raise_SimpleIUHMapLayerEvent()
	{
		(new star.hydrology.events.map.SimpleIUHMapLayerEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		getAdapter().removeGatedAnd( new Class[]{ star.hydrology.events.map.FlowaccumulationMapLayerEvent.class,star.hydrology.events.map.FlowdirectionMapLayerEvent.class,star.hydrology.events.map.WatershedLayerEvent.class},new Class[]{ star.hydrology.events.IUHEvent.class,star.hydrology.events.map.SimpleIUHMapLayerEvent.class});
		getAdapter().removeHandled(star.hydrology.events.GridStatisticsProviderChangeEvent.class);
		getAdapter().removeHandled(star.hydrology.events.SimpleIUHAdjustPanelEvent.class);
		getAdapter().removeHandled(star.hydrology.events.giuh.GIUHVelocitiesEvent.class);
		getAdapter().removeHandled(star.hydrology.events.RainfallGaugesEvent.class);
	}
	 
	abstract void setAccumulationTreshold(star.hydrology.events.GridStatisticsProviderChangeRaiser r);
	 
	protected void setFlowAcc(star.hydrology.events.interfaces.PaletteRenderableLayer flowAcc)
	{
		this.flowAcc = flowAcc ;
	}
	 
	protected void setFlowDir(star.hydrology.events.interfaces.PaletteRenderableLayer flowDir)
	{
		this.flowDir = flowDir ;
	}
	 
	protected void setLayer(star.hydrology.events.interfaces.PaletteRenderableLayer layer)
	{
		this.layer = layer ;
	}
	 
	protected void setThreshold(float threshold)
	{
		this.threshold = threshold ;
	}
	 
	protected void setWatershed(star.hydrology.events.interfaces.PaletteRenderableLayer watershed)
	{
		this.watershed = watershed ;
	}
	 
	protected void setWatershedOrigin(java.awt.Point watershedOrigin)
	{
		this.watershedOrigin = watershedOrigin ;
	}
	 
	abstract void updateRaingaugeLayer(star.hydrology.events.RainfallGaugesRaiser raiser);
	 
}