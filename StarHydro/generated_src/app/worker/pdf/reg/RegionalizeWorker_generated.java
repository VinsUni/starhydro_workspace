/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package app.worker.pdf.reg;

public abstract class RegionalizeWorker_generated extends java.lang.Object implements star.event.EventController, star.event.GatedListener, star.hydrology.events.map.RegionalizationStatisticsRaiser, star.hydrology.events.map.RegionalizeWorkerMapLayerRaiser
{
	private star.event.Adapter adapter;
	private star.hydrology.events.interfaces.PaletteRenderableLayer curvature;
	private star.hydrology.events.interfaces.PaletteRenderableLayer filled;
	private star.hydrology.events.interfaces.PaletteRenderableLayer flowAcc;
	private star.hydrology.events.interfaces.PaletteRenderableLayer flowDir;
	private star.hydrology.events.interfaces.PaletteRenderableLayer layer;
	private static final long serialVersionUID = 1L;
	private star.hydrology.events.interfaces.PaletteRenderableLayer slope;
	private star.hydrology.events.interfaces.PaletteRenderableLayer terrain;
	private star.hydrology.events.interfaces.PaletteRenderableLayer topindex;
	private star.hydrology.events.interfaces.PaletteRenderableLayer watershed;
	private java.awt.Point watershedOrigin;

	public  RegionalizeWorker_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		getAdapter().addGatedAnd( new Class[]{ star.hydrology.events.map.FlowaccumulationMapLayerEvent.class,star.hydrology.events.map.FlowdirectionMapLayerEvent.class,star.hydrology.events.map.WatershedLayerEvent.class,star.hydrology.events.map.CurvaturePDFLMapLayerEvent.class,star.hydrology.events.map.SlopePDFMapLayerEvent.class,star.hydrology.events.map.TopindexPDFMapLayerEvent.class,star.hydrology.events.map.FilledMapLayerEvent.class,star.hydrology.events.map.RegionalizationEvent.class},new Class[]{ star.hydrology.events.map.RegionalizationStatisticsEvent.class,star.hydrology.events.map.RegionalizeWorkerMapLayerEvent.class},true);
	}
	 
	private void eventAndGateRaisedHandles(final star.event.Event in_event[], final boolean valid)
	{
		final star.event.Event[] event = in_event;
		if( event != null && valid && event.length == 8 && event[0].getClass().getName().equals( "star.hydrology.events.map.FlowaccumulationMapLayerEvent" ) && event[1].getClass().getName().equals( "star.hydrology.events.map.FlowdirectionMapLayerEvent" ) && event[2].getClass().getName().equals( "star.hydrology.events.map.WatershedLayerEvent" ) && event[3].getClass().getName().equals( "star.hydrology.events.map.CurvaturePDFLMapLayerEvent" ) && event[4].getClass().getName().equals( "star.hydrology.events.map.SlopePDFMapLayerEvent" ) && event[5].getClass().getName().equals( "star.hydrology.events.map.TopindexPDFMapLayerEvent" ) && event[6].getClass().getName().equals( "star.hydrology.events.map.FilledMapLayerEvent" ) && event[7].getClass().getName().equals( "star.hydrology.events.map.RegionalizationEvent" ) &&  true )
		{
			(new star.hydrology.events.map.RegionalizationStatisticsEvent(this,false)).raise();
		(new star.hydrology.events.map.RegionalizeWorkerMapLayerEvent(this,false)).raise();
			utils.Runner.runOnThread(new Runnable() { 
				public void run() { 
					long start = System.nanoTime();
					handle( (star.hydrology.events.map.FlowaccumulationMapLayerRaiser)event[0].getSource(),(star.hydrology.events.map.FlowdirectionMapLayerRaiser)event[1].getSource(),(star.hydrology.events.map.WatershedLayerRaiser)event[2].getSource(),(star.hydrology.events.map.CurvaturePDFLMapLayerRaiser)event[3].getSource(),(star.hydrology.events.map.SlopePDFMapLayerRaiser)event[4].getSource(),(star.hydrology.events.map.TopindexPDFMapLayerRaiser)event[5].getSource(),(star.hydrology.events.map.FilledMapLayerRaiser)event[6].getSource(),(star.hydrology.events.map.RegionalizationRaiser)event[7].getSource() );
					long end = System.nanoTime();
				if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handle "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public void eventsRaised(final star.event.Event event[], final boolean valid)
	{
		eventAndGateRaisedHandles(event,valid);
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	public star.hydrology.events.interfaces.PaletteRenderableLayer getCurvature()
	{
		return this.curvature ;
	}
	 
	public star.hydrology.events.interfaces.PaletteRenderableLayer getFilled()
	{
		return this.filled ;
	}
	 
	public star.hydrology.events.interfaces.PaletteRenderableLayer getFlowAcc()
	{
		return this.flowAcc ;
	}
	 
	public star.hydrology.events.interfaces.PaletteRenderableLayer getFlowDir()
	{
		return this.flowDir ;
	}
	 
	public star.hydrology.events.interfaces.PaletteRenderableLayer getLayer()
	{
		return this.layer ;
	}
	 
	public star.hydrology.events.interfaces.PaletteRenderableLayer getSlope()
	{
		return this.slope ;
	}
	 
	public star.hydrology.events.interfaces.PaletteRenderableLayer getTerrain()
	{
		return this.terrain ;
	}
	 
	public star.hydrology.events.interfaces.PaletteRenderableLayer getTopindex()
	{
		return this.topindex ;
	}
	 
	public star.hydrology.events.interfaces.PaletteRenderableLayer getWatershed()
	{
		return this.watershed ;
	}
	 
	public java.awt.Point getWatershedOrigin()
	{
		return this.watershedOrigin ;
	}
	 
	abstract void handle(star.hydrology.events.map.FlowaccumulationMapLayerRaiser flowAcc, star.hydrology.events.map.FlowdirectionMapLayerRaiser flowDir, star.hydrology.events.map.WatershedLayerRaiser watershed, star.hydrology.events.map.CurvaturePDFLMapLayerRaiser curvature, star.hydrology.events.map.SlopePDFMapLayerRaiser slope, star.hydrology.events.map.TopindexPDFMapLayerRaiser topindex, star.hydrology.events.map.FilledMapLayerRaiser filled, star.hydrology.events.map.RegionalizationRaiser parameters);
	 
	public void raise_RegionalizationStatisticsEvent()
	{
		(new star.hydrology.events.map.RegionalizationStatisticsEvent(this)).raise();
	}
	 
	public void raise_RegionalizeWorkerMapLayerEvent()
	{
		(new star.hydrology.events.map.RegionalizeWorkerMapLayerEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		getAdapter().removeGatedAnd( new Class[]{ star.hydrology.events.map.FlowaccumulationMapLayerEvent.class,star.hydrology.events.map.FlowdirectionMapLayerEvent.class,star.hydrology.events.map.WatershedLayerEvent.class,star.hydrology.events.map.CurvaturePDFLMapLayerEvent.class,star.hydrology.events.map.SlopePDFMapLayerEvent.class,star.hydrology.events.map.TopindexPDFMapLayerEvent.class,star.hydrology.events.map.FilledMapLayerEvent.class,star.hydrology.events.map.RegionalizationEvent.class},new Class[]{ star.hydrology.events.map.RegionalizationStatisticsEvent.class,star.hydrology.events.map.RegionalizeWorkerMapLayerEvent.class});
	}
	 
	protected void setCurvature(star.hydrology.events.interfaces.PaletteRenderableLayer curvature)
	{
		this.curvature = curvature ;
	}
	 
	protected void setFilled(star.hydrology.events.interfaces.PaletteRenderableLayer filled)
	{
		this.filled = filled ;
	}
	 
	protected void setFlowAcc(star.hydrology.events.interfaces.PaletteRenderableLayer flowAcc)
	{
		this.flowAcc = flowAcc ;
	}
	 
	protected void setFlowDir(star.hydrology.events.interfaces.PaletteRenderableLayer flowDir)
	{
		this.flowDir = flowDir ;
	}
	 
	protected void setLayer(star.hydrology.events.interfaces.PaletteRenderableLayer layer)
	{
		this.layer = layer ;
	}
	 
	protected void setSlope(star.hydrology.events.interfaces.PaletteRenderableLayer slope)
	{
		this.slope = slope ;
	}
	 
	protected void setTerrain(star.hydrology.events.interfaces.PaletteRenderableLayer terrain)
	{
		this.terrain = terrain ;
	}
	 
	protected void setTopindex(star.hydrology.events.interfaces.PaletteRenderableLayer topindex)
	{
		this.topindex = topindex ;
	}
	 
	protected void setWatershed(star.hydrology.events.interfaces.PaletteRenderableLayer watershed)
	{
		this.watershed = watershed ;
	}
	 
	protected void setWatershedOrigin(java.awt.Point watershedOrigin)
	{
		this.watershedOrigin = watershedOrigin ;
	}
	 
}