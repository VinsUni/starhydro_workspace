/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package app.layers;

public abstract class LayersTable_generated extends java.lang.Object implements star.event.EventController, star.event.GatedListener, star.event.Listener, star.hydrology.events.GridStatisticsProviderChangeRaiser
{
	private star.event.Adapter adapter;
	private static final long serialVersionUID = 1L;

	public  LayersTable_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		getAdapter().addGatedAnd( new Class[]{ star.hydrology.events.GridStatisticsProviderChangeEvent.class,star.hydrology.events.map.FilledMapLayerEvent.class},new Class[]{},true);
		getAdapter().addGatedAnd( new Class[]{ star.hydrology.events.AdjustableValueEvent.class,star.hydrology.events.map.FilledMapLayerEvent.class},new Class[]{},true);
		getAdapter().addHandled(star.hydrology.events.ApplicableLayerEvent.class);
	}
	 
	private void eventAndGateRaisedHandles(final star.event.Event in_event[], final boolean valid)
	{
		final star.event.Event[] event = in_event;
		if( event != null && valid && event.length == 2 && event[0].getClass().getName().equals( "star.hydrology.events.GridStatisticsProviderChangeEvent" ) && event[1].getClass().getName().equals( "star.hydrology.events.map.FilledMapLayerEvent" ) &&  true )
		{
			
			utils.Runner.runOnThread(new Runnable() { 
				public void run() { 
					long start = System.nanoTime();
					setAccumulationTreshold( (star.hydrology.events.GridStatisticsProviderChangeRaiser)event[0].getSource(),(star.hydrology.events.map.FilledMapLayerRaiser)event[1].getSource() );
					long end = System.nanoTime();
				if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".setAccumulationTreshold "  + ( end-start )/1000000 ); } }},this,2);
		}
		if( event != null && valid && event.length == 2 && event[0].getClass().getName().equals( "star.hydrology.events.AdjustableValueEvent" ) && event[1].getClass().getName().equals( "star.hydrology.events.map.FilledMapLayerEvent" ) &&  true )
		{
			
			utils.Runner.runOnThread(new Runnable() { 
				public void run() { 
					long start = System.nanoTime();
					initAccumulationTreshold( (star.hydrology.events.AdjustableValueRaiser)event[0].getSource(),(star.hydrology.events.map.FilledMapLayerRaiser)event[1].getSource() );
					long end = System.nanoTime();
				if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".initAccumulationTreshold "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "star.hydrology.events.ApplicableLayerEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			filterLayers( (star.hydrology.events.ApplicableLayerRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".filterLayers "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public void eventsRaised(final star.event.Event event[], final boolean valid)
	{
		eventAndGateRaisedHandles(event,valid);
	}
	 
	abstract void filterLayers(star.hydrology.events.ApplicableLayerRaiser r);
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	abstract void initAccumulationTreshold(star.hydrology.events.AdjustableValueRaiser raiser, star.hydrology.events.map.FilledMapLayerRaiser map);
	 
	public void raise_GridStatisticsProviderChangeEvent()
	{
		(new star.hydrology.events.GridStatisticsProviderChangeEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		getAdapter().removeGatedAnd( new Class[]{ star.hydrology.events.GridStatisticsProviderChangeEvent.class,star.hydrology.events.map.FilledMapLayerEvent.class},new Class[]{});
		getAdapter().removeGatedAnd( new Class[]{ star.hydrology.events.AdjustableValueEvent.class,star.hydrology.events.map.FilledMapLayerEvent.class},new Class[]{});
		getAdapter().removeHandled(star.hydrology.events.ApplicableLayerEvent.class);
	}
	 
	abstract void setAccumulationTreshold(star.hydrology.events.GridStatisticsProviderChangeRaiser r, star.hydrology.events.map.FilledMapLayerRaiser map);
	 
}