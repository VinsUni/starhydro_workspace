/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package app.viewers;

public abstract class StreamsViewer_generated extends app.viewers.CustomAbstractMapViewer implements star.event.EventController, star.event.GatedListener, star.event.Listener, star.hydrology.events.AdjustableValueRaiser, star.hydrology.events.RenderableVisibleRaiser
{
	private star.hydrology.events.interfaces.PaletteRenderableLayer flowAccomulation;
	private star.hydrology.events.interfaces.PaletteRenderableLayer flowDirection;
	private static final long serialVersionUID = 1L;

	public  StreamsViewer_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addGatedAnd( new Class[]{ star.hydrology.events.map.FilledMapLayerEvent.class,star.hydrology.events.map.FlowaccumulationMapLayerEvent.class,star.hydrology.events.map.FlowdirectionMapLayerEvent.class},new Class[]{ star.hydrology.events.RenderableVisibleEvent.class},true);
		getAdapter().addHandled(star.hydrology.events.GridStatisticsProviderChangeEvent.class);
	}
	 
	private void eventAndGateRaisedHandles(final star.event.Event in_event[], final boolean valid)
	{
		final star.event.Event[] event = in_event;
		if( event != null && valid && event.length == 3 && event[0].getClass().getName().equals( "star.hydrology.events.map.FilledMapLayerEvent" ) && event[1].getClass().getName().equals( "star.hydrology.events.map.FlowaccumulationMapLayerEvent" ) && event[2].getClass().getName().equals( "star.hydrology.events.map.FlowdirectionMapLayerEvent" ) &&  true )
		{
			(new star.hydrology.events.RenderableVisibleEvent(this,false)).raise();
			utils.Runner.runOnThread(new Runnable() { 
				public void run() { 
					long start = System.nanoTime();
					setLayers( (star.hydrology.events.map.FilledMapLayerRaiser)event[0].getSource(),(star.hydrology.events.map.FlowaccumulationMapLayerRaiser)event[1].getSource(),(star.hydrology.events.map.FlowdirectionMapLayerRaiser)event[2].getSource() );
					long end = System.nanoTime();
				if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".setLayers "  + ( end-start )/1000000 ); } }},this,3);
		}
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		super.eventRaised( event );
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "star.hydrology.events.GridStatisticsProviderChangeEvent" ) && event.isValid() ) 
		{
			(new star.hydrology.events.AdjustableValueEvent(this,false)).raise();
		(new star.hydrology.events.RenderableVisibleEvent(this,false)).raise();
		 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			setAdjustableValue( (star.hydrology.events.GridStatisticsProviderChangeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".setAdjustableValue "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public void eventsRaised(final star.event.Event event[], final boolean valid)
	{
		eventAndGateRaisedHandles(event,valid);
	}
	 
	protected star.hydrology.events.interfaces.PaletteRenderableLayer getFlowAccomulation()
	{
		return this.flowAccomulation ;
	}
	 
	protected star.hydrology.events.interfaces.PaletteRenderableLayer getFlowDirection()
	{
		return this.flowDirection ;
	}
	 
	public void raise_AdjustableValueEvent()
	{
		(new star.hydrology.events.AdjustableValueEvent(this)).raise();
	}
	 
	public void raise_RenderableVisibleEvent()
	{
		(new star.hydrology.events.RenderableVisibleEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeGatedAnd( new Class[]{ star.hydrology.events.map.FilledMapLayerEvent.class,star.hydrology.events.map.FlowaccumulationMapLayerEvent.class,star.hydrology.events.map.FlowdirectionMapLayerEvent.class},new Class[]{ star.hydrology.events.RenderableVisibleEvent.class});
		getAdapter().removeHandled(star.hydrology.events.GridStatisticsProviderChangeEvent.class);
	}
	 
	abstract void setAdjustableValue(star.hydrology.events.GridStatisticsProviderChangeRaiser r);
	 
	protected void setFlowAccomulation(star.hydrology.events.interfaces.PaletteRenderableLayer flowAccomulation)
	{
		this.flowAccomulation = flowAccomulation ;
	}
	 
	protected void setFlowDirection(star.hydrology.events.interfaces.PaletteRenderableLayer flowDirection)
	{
		this.flowDirection = flowDirection ;
	}
	 
	abstract void setLayers(star.hydrology.events.map.FilledMapLayerRaiser filled, star.hydrology.events.map.FlowaccumulationMapLayerRaiser flowAcc, star.hydrology.events.map.FlowdirectionMapLayerRaiser flowDir);
	 
}