/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package star.hydro.rainfall;

public abstract class RainfallChart_generated extends star.hydrology.ui.chart.AbstractChart implements star.event.EventController, star.event.Listener
{
	private star.event.Adapter adapter;
	private static final long serialVersionUID = 1L;

	public  RainfallChart_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(star.hydro.rainfall.TimeSeriesEvent.class);
		getAdapter().addHandled(star.hydrology.events.RainfallGaugesTimeseriesEvent.class);
		getAdapter().addHandled(star.hydrology.events.PaletteChangedEvent.class);
		getAdapter().addHandled(star.hydro.rainfall.ConvolutionPaletteEvent.class);
	}
	 
	abstract void convolutionPalette(star.hydro.rainfall.ConvolutionPaletteRaiser r);
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "star.hydro.rainfall.TimeSeriesEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleRainfall( (star.hydro.rainfall.TimeSeriesRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleRainfall "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.events.RainfallGaugesTimeseriesEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleRainfall( (star.hydrology.events.RainfallGaugesTimeseriesRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleRainfall "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.events.PaletteChangedEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			updatePalette( (star.hydrology.events.PaletteChangedRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".updatePalette "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydro.rainfall.ConvolutionPaletteEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			convolutionPalette( (star.hydro.rainfall.ConvolutionPaletteRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".convolutionPalette "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	abstract void handleRainfall(star.hydro.rainfall.TimeSeriesRaiser r);
	 
	abstract void handleRainfall(star.hydrology.events.RainfallGaugesTimeseriesRaiser r);
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(star.hydro.rainfall.TimeSeriesEvent.class);
		getAdapter().removeHandled(star.hydrology.events.RainfallGaugesTimeseriesEvent.class);
		getAdapter().removeHandled(star.hydrology.events.PaletteChangedEvent.class);
		getAdapter().removeHandled(star.hydro.rainfall.ConvolutionPaletteEvent.class);
	}
	 
	abstract void updatePalette(star.hydrology.events.PaletteChangedRaiser r);
	 
}