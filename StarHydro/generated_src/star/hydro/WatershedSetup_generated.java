/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package star.hydro;

public abstract class WatershedSetup_generated extends javax.swing.JPanel implements star.event.EventController, star.event.Listener
{
	private star.event.Adapter adapter;
	private javax.swing.JEditorPane form;
	private java.util.prefs.Preferences preferences = null;
	private static final long serialVersionUID = 1L;
	private java.util.Hashtable<String, String> state = new java.util.Hashtable<String, String>();

	public WatershedSetup_generated()
	{
		super();
	}

	public WatershedSetup_generated(boolean boolean0)
	{
		super(boolean0);
	}

	public WatershedSetup_generated(java.awt.LayoutManager layoutManager, boolean boolean0)
	{
		super(layoutManager, boolean0);
	}

	public WatershedSetup_generated(java.awt.LayoutManager layoutManager)
	{
		super(layoutManager);
	}

	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(mit.awt.event.ActionEvent.class);
	}

	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}

	private void eventRaisedHandles(final star.event.Event event)
	{
		if (event.getClass().getName().equals("mit.awt.event.ActionEvent") && event.isValid())
		{
			utils.Runner.runOnThread(new Runnable()
			{
				public void run()
				{
					long start = System.nanoTime();
					handleAction((mit.awt.event.ActionRaiser) event.getSource());
					long end = System.nanoTime();
					if (end - start > 500000000)
					{
						System.out.println(this.getClass().getName() + ".handleAction " + (end - start) / 1000000);
					}
				}
			}, this, 2);
		}
	}

	public star.event.Adapter getAdapter()
	{
		if (adapter == null)
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}

	protected javax.swing.JEditorPane getForm()
	{
		return this.form;
	}

	public java.util.prefs.Preferences getPreferences(java.lang.String name)
	{
		try
		{
			plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
			this.preferences = pref.getPreferences(name);
		}
		catch (plugin.PluginException ex)
		{
			ex.printStackTrace();
		}
		return preferences;
	}

	public java.util.prefs.Preferences getPreferences()
	{
		if (preferences == null)
		{
			try
			{
				plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
				this.preferences = pref.getPreferences("star.hydro.WatershedSetup");
			}
			catch (plugin.PluginException ex)
			{
				ex.printStackTrace();
			}
		}
		return preferences;
	}

	protected java.util.Hashtable<String, String> getState()
	{
		return this.state;
	}

	protected abstract void handleAction(mit.awt.event.ActionRaiser event);

	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(mit.awt.event.ActionEvent.class);
	}

	protected void setForm(javax.swing.JEditorPane form)
	{
		this.form = form;
	}

	protected void setState(java.util.Hashtable<String, String> state)
	{
		this.state = state;
	}

}