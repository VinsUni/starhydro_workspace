/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package star.hydrology.ui.chart.horton;

public abstract class HortonNumberChart_generated extends star.hydrology.ui.chart.AbstractChart implements star.event.EventController, star.event.Listener
{
	private star.event.Adapter adapter;
	private static final long serialVersionUID = 1L;

	public  HortonNumberChart_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addContained(star.hydrology.ui.chart.horton.LogScaleEvent.class );
		getAdapter().addContained(star.hydrology.ui.chart.horton.TrendLineEvent.class );
		getAdapter().addHandled(star.hydrology.events.HortonNumberEvent.class);
		getAdapter().addHandled(star.hydrology.ui.chart.horton.TrendLineEvent.class);
		getAdapter().addHandled(star.hydrology.events.StreamOrderStatisticsEvent.class);
		getAdapter().addHandled(star.hydrology.ui.chart.horton.LogScaleEvent.class);
		getAdapter().addHandled(star.hydrology.events.PaletteChangedEvent.class);
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "star.hydrology.events.HortonNumberEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			hortonTrends( (star.hydrology.events.HortonNumberRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".hortonTrends "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.ui.chart.horton.TrendLineEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			trendLine( (star.hydrology.ui.chart.horton.TrendLineRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".trendLine "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.events.StreamOrderStatisticsEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			hortonNumber( (star.hydrology.events.StreamOrderStatisticsRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".hortonNumber "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.ui.chart.horton.LogScaleEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			logScale( (star.hydrology.ui.chart.horton.LogScaleRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".logScale "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "star.hydrology.events.PaletteChangedEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			paletteChange( (star.hydrology.events.PaletteChangedRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".paletteChange "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	abstract void hortonNumber(star.hydrology.events.StreamOrderStatisticsRaiser r);
	 
	abstract void hortonTrends(star.hydrology.events.HortonNumberRaiser r);
	 
	abstract void logScale(star.hydrology.ui.chart.horton.LogScaleRaiser r);
	 
	abstract void paletteChange(star.hydrology.events.PaletteChangedRaiser r);
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeContained(star.hydrology.ui.chart.horton.LogScaleEvent.class );
		getAdapter().removeContained(star.hydrology.ui.chart.horton.TrendLineEvent.class );
		getAdapter().removeHandled(star.hydrology.events.HortonNumberEvent.class);
		getAdapter().removeHandled(star.hydrology.ui.chart.horton.TrendLineEvent.class);
		getAdapter().removeHandled(star.hydrology.events.StreamOrderStatisticsEvent.class);
		getAdapter().removeHandled(star.hydrology.ui.chart.horton.LogScaleEvent.class);
		getAdapter().removeHandled(star.hydrology.events.PaletteChangedEvent.class);
	}
	 
	abstract void trendLine(star.hydrology.ui.chart.horton.TrendLineRaiser r);
	 
}