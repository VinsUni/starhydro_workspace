/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package app;

public abstract class View2D_generated extends javax.swing.JComponent implements star.event.EventController, star.event.GatedListener, star.event.Listener, starhydro.events.DelineateWatershedRaiser, starhydro.events.LoadTileRaiser, starhydro.events.ViewLocationChangeRaiser, starhydro.events.WatershedAvailableRaiser
{
	private star.event.Adapter adapter;
	private java.awt.Dimension preferredScrollableViewportSize = new java.awt.Dimension(800,600);
	private java.awt.Dimension preferredSize;
	private float scale = 1;
	private boolean scrollableTracksViewportHeight = false;
	private boolean scrollableTracksViewportWidth = false;
	private static final long serialVersionUID = 1L;

	public  View2D_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(starhydro.events.ViewScaleChangedEvent.class);
		getAdapter().addHandled(starhydro.events.AccumulationThresholdChangedEvent.class);
		getAdapter().addGatedAnd( new Class[]{ starhydro.events.DelineateWatershedEvent.class,starhydro.events.AccumulationThresholdChangedEvent.class},new Class[]{ starhydro.events.WatershedAvailableEvent.class},true);
		getAdapter().addHandled(starhydro.events.LoadTileEvent.class);
		getAdapter().addHandled(starhydro.events.ViewLocationChangeEvent.class);
	}
	 
	private void eventAndGateRaisedHandles(final star.event.Event in_event[], final boolean valid)
	{
		final star.event.Event[] event = in_event;
		if( event != null && valid && event.length == 2 && event[0].getClass().getName().equals( "starhydro.events.DelineateWatershedEvent" ) && event[1].getClass().getName().equals( "starhydro.events.AccumulationThresholdChangedEvent" ) &&  true )
		{
			(new starhydro.events.WatershedAvailableEvent(this,false)).raise();
			utils.Runner.runOnThread(new Runnable() { 
				public void run() { 
					long start = System.nanoTime();
					handleDelineateWatershed( (starhydro.events.DelineateWatershedRaiser)event[0].getSource(),(starhydro.events.AccumulationThresholdChangedRaiser)event[1].getSource() );
					long end = System.nanoTime();
				if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleDelineateWatershed "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "starhydro.events.ViewScaleChangedEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleScaleChange( (starhydro.events.ViewScaleChangedRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleScaleChange "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "starhydro.events.AccumulationThresholdChangedEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleThresholdChanged( (starhydro.events.AccumulationThresholdChangedRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleThresholdChanged "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "starhydro.events.LoadTileEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleLoadTile( (starhydro.events.LoadTileRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleLoadTile "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "starhydro.events.ViewLocationChangeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleLocationChange( (starhydro.events.ViewLocationChangeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleLocationChange "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public void eventsRaised(final star.event.Event event[], final boolean valid)
	{
		eventAndGateRaisedHandles(event,valid);
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	public java.awt.Dimension getPreferredScrollableViewportSize()
	{
		return this.preferredScrollableViewportSize ;
	}
	 
	public java.awt.Dimension getPreferredSize()
	{
		return this.preferredSize ;
	}
	 
	protected float getScale()
	{
		return this.scale ;
	}
	 
	public boolean getScrollableTracksViewportHeight()
	{
		return this.scrollableTracksViewportHeight ;
	}
	 
	public boolean getScrollableTracksViewportWidth()
	{
		return this.scrollableTracksViewportWidth ;
	}
	 
	abstract void handleDelineateWatershed(starhydro.events.DelineateWatershedRaiser r, starhydro.events.AccumulationThresholdChangedRaiser r2);
	 
	abstract void handleLoadTile(starhydro.events.LoadTileRaiser r);
	 
	abstract void handleLocationChange(starhydro.events.ViewLocationChangeRaiser r);
	 
	abstract void handleScaleChange(starhydro.events.ViewScaleChangedRaiser r);
	 
	abstract void handleThresholdChanged(starhydro.events.AccumulationThresholdChangedRaiser r);
	 
	public boolean isScrollableTracksViewportHeight()
	{
		return this.scrollableTracksViewportHeight ;
	}
	 
	public boolean isScrollableTracksViewportWidth()
	{
		return this.scrollableTracksViewportWidth ;
	}
	 
	public void raise_DelineateWatershedEvent()
	{
		(new starhydro.events.DelineateWatershedEvent(this)).raise();
	}
	 
	public void raise_LoadTileEvent()
	{
		(new starhydro.events.LoadTileEvent(this)).raise();
	}
	 
	public void raise_ViewLocationChangeEvent()
	{
		(new starhydro.events.ViewLocationChangeEvent(this)).raise();
	}
	 
	public void raise_WatershedAvailableEvent()
	{
		(new starhydro.events.WatershedAvailableEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(starhydro.events.ViewScaleChangedEvent.class);
		getAdapter().removeHandled(starhydro.events.AccumulationThresholdChangedEvent.class);
		getAdapter().removeGatedAnd( new Class[]{ starhydro.events.DelineateWatershedEvent.class,starhydro.events.AccumulationThresholdChangedEvent.class},new Class[]{ starhydro.events.WatershedAvailableEvent.class});
		getAdapter().removeHandled(starhydro.events.LoadTileEvent.class);
		getAdapter().removeHandled(starhydro.events.ViewLocationChangeEvent.class);
	}
	 
	protected void setPreferredScrollableViewportSize(java.awt.Dimension preferredScrollableViewportSize)
	{
		this.preferredScrollableViewportSize = preferredScrollableViewportSize ;
	}
	 
	public void setPreferredSize(java.awt.Dimension preferredSize)
	{
		this.preferredSize = preferredSize ;
	}
	 
	protected void setScale(float scale)
	{
		this.scale = scale ;
	}
	 
	protected void setScrollableTracksViewportHeight(boolean scrollableTracksViewportHeight)
	{
		this.scrollableTracksViewportHeight = scrollableTracksViewportHeight ;
	}
	 
	protected void setScrollableTracksViewportWidth(boolean scrollableTracksViewportWidth)
	{
		this.scrollableTracksViewportWidth = scrollableTracksViewportWidth ;
	}
	 
}