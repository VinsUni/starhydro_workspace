/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package app;

public abstract class OpenInStarHydro_generated extends javax.swing.JButton implements star.event.EventController, star.event.Listener, starhydro.events.OpenInStarHydroRaiser
{
	private star.event.Adapter adapter;
	private static final long serialVersionUID = 1L;

	public  OpenInStarHydro_generated()
	{
		super();
	}
	 
	public  OpenInStarHydro_generated(java.lang.String string, javax.swing.Icon icon)
	{
		super( string,icon);
	}
	 
	public  OpenInStarHydro_generated(java.lang.String string)
	{
		super( string);
	}
	 
	public  OpenInStarHydro_generated(javax.swing.Action action)
	{
		super( action);
	}
	 
	public  OpenInStarHydro_generated(javax.swing.Icon icon)
	{
		super( icon);
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(starhydro.events.WatershedAvailableEvent.class);
		getAdapter().addHandled(starhydro.events.OpenInStarHydroEvent.class);
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "starhydro.events.WatershedAvailableEvent" ) && event.isValid() ) 
		{
			(new starhydro.events.OpenInStarHydroEvent(this,false)).raise();
		 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleWatershedAvailable( (starhydro.events.WatershedAvailableRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleWatershedAvailable "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "starhydro.events.WatershedAvailableEvent" ) && !event.isValid() ) 
		{
			(new starhydro.events.OpenInStarHydroEvent(this,false)).raise();
		 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleWatershedNotAvailable( (starhydro.events.WatershedAvailableRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleWatershedNotAvailable "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "starhydro.events.OpenInStarHydroEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleOpenInStarHydro( (starhydro.events.OpenInStarHydroRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleOpenInStarHydro "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	abstract void handleOpenInStarHydro(starhydro.events.OpenInStarHydroRaiser r);
	 
	abstract void handleWatershedAvailable(starhydro.events.WatershedAvailableRaiser r);
	 
	abstract void handleWatershedNotAvailable(starhydro.events.WatershedAvailableRaiser r);
	 
	public void raise_OpenInStarHydroEvent()
	{
		(new starhydro.events.OpenInStarHydroEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(starhydro.events.WatershedAvailableEvent.class);
		getAdapter().removeHandled(starhydro.events.OpenInStarHydroEvent.class);
	}
	 
}